

Track t = {}

// Here's one:
// Create a boxes iterator where .next() is 
// going to return the next box in the file/stream.
//
// You could then build up applications by matching on
// the kind.
// This has the disadvantage that it makes for complex nesting
// if you want to keep track of the container relationships
// in the hieriarch
for b in &boxes {
    match b.kind {
        // this would work so long as their are not
        // complex nesting information required to 
        // get to the value.
        // In this case you probably don't have to
        // think about how the "disk" box  is burried
        // /moov/udta/meta/ilst/disk
        b"disk" => {
            t.fill(b);
        }

        // This would require more if you were trying to 
        // pull this out of a hierarchy that included
        // mutiple tracks.
        // We need first to find:
        // For /moov/trak/mdia/hdlr.handler_type = "sound"
        // Then with that base we want:
        //  moov/trak/mdia/minf/stbl/stsd
        // mand mabye even stsd.description_format == "mp4a".
        b"stsd" => {
            t.fill(b);
        }
        b" 
        _ = {
            println("{}", b);
        }
    }
}

// or: Build the tree and access it through box paths.
// This would be awesome for an interactive
// explorer. But it would require
// we build the entire tree and then go back 
// and pull things from it.
// For just displaying track data that's 
// multiple passes and maybe not so efficient if
// speed is of the utmost.

let disk_path = "/moov/udata/meta/ilst/disk"
t.disk_number = get_box(disk_path).disk_number;


-----

// As at the top but
// how about a read function 
// that provides you with the bufer for the box
// and the size and the box type ([u8;4] e.g. == "stsd").
// You can parse as you need or helper functions
// are available to parse out the values.


// Special display function
let boxes = MP4Buffer::new(r: impl Read + Seek);
for bx in boxes {
    bx.read(display_f)   // display_f is a function to display a box.
}

for bx in boxes {
    bx.read(fill(tk))  // fill(tk) return a functin that fills a track from a box.
}


// Fill takes buf, size, type and parese_func
// and uses it to fill a track
// Fill is guaranteed to be called once for eaech box, in the order
// in which they apper in the original buffer.
// Buffer is guaranteed to be the size of the box.
// We could pass indexes instead and provide the entire buffer?
fn fill(t: Track, f: MpegFormat) -> fn(buf &[u8], usize, [u8;4, parse_func(...)-> ParseResult]) {
    fn f(buf: &[u8], s: usize, type: [u8[4]],  {
        result = match type {
            "stsd" =>  parse_func(buf, s, type),
            _ => None;
        }
        match result {
            ParseResult::STSD(v) => {
                f.sample_rate = v.sample_rate;
                f.bits_per_sample = v.sample_size;
                f.channels = v.channels;
            },
            ParseResult::TRKN(v) => {
                t.track_number = v.track;
                t.total_tracks = v.tracks;
            }
            _ => (),
        }
    }
}

// If you wanted to get really tricky you could
// ignore the  convenience function and skip the intermediate parse into a struct
// and read directly from the buffer.
fn fill(t: Track, f: MpegFormat) -> fn(buf &[u8], usize, [u8;4, parse_func(...)-> ParseResult]) {
    fn f(buf: &[u8], s: usize, type: [u8[4]],  {
        result = match type {
            "stsd" => {
                buff.advance(8+4+12+6+6+4);  // get to the relevant part of the buffer
                f.channels = buf.get_u16();
                f.bit_per_sample = buf.get_u16();
                buff.advance(4); // move past the quicktime_audio stuff.
                f.sample_rate = buf.get_u32();
            }
            "trkn" => {
                // this is the ilst contained 'data' box. 
                let(_, _, data) = read_data(buf, s); // helper function.
                t.track_number = u16::from_be_bytes([d[2], d[3]]);
                t.total_tracks = u16::from_be_bytes([d[4], d[5]]);
            }
            _ => (),
        }
    }
}

-------------

// Solution:
// You have a read/get function for each box type that does the parsing for you.
// The signature includes the buffer to read from and the space to read into 
// specific to the box. Each of these values should take a slice from buf, typed.

fn get_ftyp_box_values<'a>( 
    buf: mut &'a [u8],
    brand: &mut &'b [u8] // This is intended to point into buf.
    version &mut u8,
    flags: &mut u32,
    compat_brands: &mut Vec<&'b [u8>,]
) -> usize // how many bytes were read (this should be the size of the box.)

// So:
// you can something with:

    let mut box = FtypBox{..Default::default()};
    let read = get_ftyp_box_values(
        buf,
        &mut bx.brand,
        &mut bx.version,
        &mut bx.flags,
        &mmut bx.compat_brands, 
    );

// Similarly 
fn get_disk_box_values<'a>(
    buf: mut &'a u8,
    disk: mut &' u16,
    disks: mut &' u16,
) -> usize

// and 
    let mut tk = track::Track{..Default::default()};
    let read = get_disk_box_values(
        buf, 
        &mut tk.disk_number,
        &mut tk.disk_total,
    );

// Thus you're reading directly from the parse logic, which
// has only been written once, directly into an arbitrary structure,
// which we can provide (e.g. FtyBox), or can be provided outside
// of this (e.g. track::Track);

-----------
// Now how to get these lower level functions into the file reading machinary.
//

let boxes = MP4Buffer::new(r: impl Read + Seek);
let tk = track::Track();
let fill = get_track_filler(FillerHash) // FillerHash is a hash table of types to read functions
for bx in boxes {
    bx.read(fill(tk))   // display_f is a function to display a box.
}

// Box.read()
fn read(&self, buff, filler_fn) {
    filler_fn(buff, self.kind);
    buff.advance(self.size);
}

// Box.next for Iterator {
fn (mut& self) -> Option<Self::Item> type Item = MP4Box<'a> {
    if slef.buflen() = 0 {
        return None;
    }

    let(b) = read_box_header(self.buf); // This just reads the box header.
    Some(b); // Should we return what was read?
}



// Return a function that will read a box into a track
// based on the kind it is.                // This is an enum of kind specific read functions.

// Returns a function that will return a funciton to read boxes
// into tracks.
// The input is a hashmap of box specific functions for reading particular
// box values into specific track values.
// The output is a function which takes a specific track and
// returns a function that will read the box, and put right box data
// in to approprate track element.
fn get_track_filer(fmap: HashMap<kind: &[u8], BoxType::ReadFunction)) {
    fn track_filler(tk: track::Track) {
        fill(buf, kind) {
            let rf = fmap.get(kind);
            match rf {
                BoxType::Disk(f) => f(buf, &mut tk.disk_number, &mut tk.disk_total),
                BoxType::Track(f) => f(buf, &mut tk.track_number, &mut tk.track_total),
                ...
                _ => () We only need the map to populate for the tracks we want to read.
            }
        }
    }
}


